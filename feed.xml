<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gameFu's Blog</title>
  <id>http://blog.example.com</id>
  <link href="http://blog.example.com"/>
  <link href="http://blog.example.com/feed.xml" rel="self"/>
  <updated>2015-06-18T22:43:00+08:00</updated>
  <author>
    <name>Site Author</name>
  </author>
  <entry>
    <title>Ruby on Rails 终极部署方案 nginx+mina+puma</title>
    <link rel="alternate" href="http://blog.example.com/2015/06/18/rails-nginx-mina-puma/"/>
    <id>http://blog.example.com/2015/06/18/rails-nginx-mina-puma/</id>
    <published>2015-06-18T22:43:00+08:00</published>
    <updated>2015-06-19T00:44:40+08:00</updated>
    <summary type="html">&lt;h2 id="搭建工具介绍"&gt;搭建工具介绍&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Ruby on Rails&lt;/code&gt;作为一款十分优秀的web开发框架，在当前web领域中慢慢占据了越来越重要，秉承rails快速开发的特点，很多快速部署rails的方案也越来越多。这篇文章中所选的方案是我个人认为十分优秀的部署方案。这套部署方案的结构是，&lt;code&gt;nginx&lt;/code&gt;作为反向代理服务器负责负载均衡，&lt;code&gt;mina&lt;/code&gt;作为自动化部署工具，&lt;code&gt;puma&lt;/code&gt;作为rails的web服务器&lt;/p&gt;

&lt;h3 id="nginx"&gt;nginx&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;nginx&lt;/code&gt;是一款优秀的代理服务器，其高效的性能已经得到了业界的广泛认可，相信作为web开发人员不会没听说过他的...&lt;/p&gt;</summary>
    <content type="html">&lt;h2 id="搭建工具介绍"&gt;搭建工具介绍&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Ruby on Rails&lt;/code&gt;作为一款十分优秀的web开发框架，在当前web领域中慢慢占据了越来越重要，秉承rails快速开发的特点，很多快速部署rails的方案也越来越多。这篇文章中所选的方案是我个人认为十分优秀的部署方案。这套部署方案的结构是，&lt;code&gt;nginx&lt;/code&gt;作为反向代理服务器负责负载均衡，&lt;code&gt;mina&lt;/code&gt;作为自动化部署工具，&lt;code&gt;puma&lt;/code&gt;作为rails的web服务器&lt;/p&gt;

&lt;h3 id="nginx"&gt;nginx&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;nginx&lt;/code&gt;是一款优秀的代理服务器，其高效的性能已经得到了业界的广泛认可，相信作为web开发人员不会没听说过他的大名&lt;/p&gt;

&lt;h3 id="mina"&gt;mina&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;mina&lt;/code&gt;是一款由ruby开发的自动化部署工具，其目的是为了简化每次rails代码提交时的部署，一键完成部署，杜绝了提交到git服务器后，又去服务器上git pull的情况&lt;/p&gt;

&lt;h3 id="puma"&gt;puma&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;puma&lt;/code&gt;是一款专门针对rails的并发服务器，相对于&lt;code&gt;passenger&lt;/code&gt;，&lt;code&gt;puma&lt;/code&gt;可配置面更广，而且性能比&lt;code&gt;passenger&lt;/code&gt;更高，是rails web服务器的不二之选&lt;/p&gt;

&lt;h2 id="部署前言"&gt;部署前言&lt;/h2&gt;

&lt;p&gt;由于这篇文章需要很多铺垫，包括rails的安装下载,git的配置等等，需要读者自己去查阅资料或者查阅之前我写过的一些文章，如果期间有什么问题，请留言。。&lt;/p&gt;

&lt;h2 id="mina"&gt;mina&lt;/h2&gt;

&lt;p&gt;首先在你的rails项目的&lt;code&gt;Gemfile&lt;/code&gt;中加上&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;mina&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行&lt;code&gt;bundle&lt;/code&gt; 安装 &lt;code&gt;mina&lt;/code&gt;，接着在你的rails项目根目录初始化&lt;code&gt;mina&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mina init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是在你项目的config目录下会有一个&lt;code&gt;deploy.rb&lt;/code&gt;，配置&lt;code&gt;deploy.rb&lt;/code&gt;，列出重点部分，每一行的解释会附在代码的注释里&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="c1"&gt;#服务器地址,是使用ssh的方式登录服务器&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:domain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'root@192.168.0.103'&lt;/span&gt;
&lt;span class="c1"&gt;#服务器中项目部署位置&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:deploy_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/var/www/ruby_sample'&lt;/span&gt;
&lt;span class="c1"&gt;#git代码仓库&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:repository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'https://github.com/gameFu/ruby_sample.git'&lt;/span&gt;
&lt;span class="c1"&gt;#git分支&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'master'&lt;/span&gt;

&lt;span class="c1"&gt;# 中括号里的文件 会出现在服务器项目附录的shared文件夹中，这里加入了secrets.yml，环境密钥无需跟开发计算机一样&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:shared_paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'config/database.yml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'log'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'config/secrets.yml'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 这个块里面的代码表示运行 mina setup时运行的命令&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:setup&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:environment&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="c1"&gt;# 在服务器项目目录的shared中创建log文件夹&lt;/span&gt;
  &lt;span class="n"&gt;queue!&lt;/span&gt; &lt;span class="sx"&gt;%[mkdir -p "#{deploy_to}/#{shared_path}/log"]&lt;/span&gt;
  &lt;span class="n"&gt;queue!&lt;/span&gt; &lt;span class="sx"&gt;%[chmod g+rx,u+rwx "#{deploy_to}/#{shared_path}/log"]&lt;/span&gt;

  &lt;span class="c1"&gt;# 在服务器项目目录的shared中创建config文件夹 下同&lt;/span&gt;
  &lt;span class="n"&gt;queue!&lt;/span&gt; &lt;span class="sx"&gt;%[mkdir -p "#{deploy_to}/#{shared_path}/config"]&lt;/span&gt;
  &lt;span class="n"&gt;queue!&lt;/span&gt; &lt;span class="sx"&gt;%[chmod g+rx,u+rwx "#{deploy_to}/#{shared_path}/config"]&lt;/span&gt;

  &lt;span class="n"&gt;queue!&lt;/span&gt; &lt;span class="sx"&gt;%[touch "#{deploy_to}/#{shared_path}/config/database.yml"]&lt;/span&gt;
  &lt;span class="n"&gt;queue!&lt;/span&gt; &lt;span class="sx"&gt;%[touch "#{deploy_to}/#{shared_path}/config/secrets.yml"]&lt;/span&gt;

  &lt;span class="c1"&gt;# puma.rb 配置puma必须得文件夹及文件&lt;/span&gt;
  &lt;span class="n"&gt;queue!&lt;/span&gt; &lt;span class="sx"&gt;%[mkdir -p "#{deploy_to}/shared/tmp/pids"]&lt;/span&gt;
  &lt;span class="n"&gt;queue!&lt;/span&gt; &lt;span class="sx"&gt;%[chmod g+rx,u+rwx "#{deploy_to}/shared/tmp/pids"]&lt;/span&gt;

  &lt;span class="n"&gt;queue!&lt;/span&gt; &lt;span class="sx"&gt;%[mkdir -p "#{deploy_to}/shared/tmp/sockets"]&lt;/span&gt;
  &lt;span class="n"&gt;queue!&lt;/span&gt; &lt;span class="sx"&gt;%[chmod g+rx,u+rwx "#{deploy_to}/shared/tmp/sockets"]&lt;/span&gt;

  &lt;span class="n"&gt;queue!&lt;/span&gt; &lt;span class="sx"&gt;%[touch "#{deploy_to}/shared/config/puma.rb"]&lt;/span&gt;
  &lt;span class="n"&gt;queue&lt;/span&gt;  &lt;span class="sx"&gt;%[echo "-----&amp;gt; Be sure to edit 'shared/config/puma.rb'."]&lt;/span&gt;

  &lt;span class="c1"&gt;# tmp/sockets/puma.state&lt;/span&gt;
  &lt;span class="n"&gt;queue!&lt;/span&gt; &lt;span class="sx"&gt;%[touch "#{deploy_to}/shared/tmp/sockets/puma.state"]&lt;/span&gt;
  &lt;span class="n"&gt;queue&lt;/span&gt;  &lt;span class="sx"&gt;%[echo "-----&amp;gt; Be sure to edit 'shared/tmp/sockets/puma.state'."]&lt;/span&gt;

  &lt;span class="c1"&gt;# log/puma.stdout.log&lt;/span&gt;
  &lt;span class="n"&gt;queue!&lt;/span&gt; &lt;span class="sx"&gt;%[touch "#{deploy_to}/shared/log/puma.stdout.log"]&lt;/span&gt;
  &lt;span class="n"&gt;queue&lt;/span&gt;  &lt;span class="sx"&gt;%[echo "-----&amp;gt; Be sure to edit 'shared/log/puma.stdout.log'."]&lt;/span&gt;

  &lt;span class="c1"&gt;# log/puma.stdout.log&lt;/span&gt;
  &lt;span class="n"&gt;queue!&lt;/span&gt; &lt;span class="sx"&gt;%[touch "#{deploy_to}/shared/log/puma.stderr.log"]&lt;/span&gt;
  &lt;span class="n"&gt;queue&lt;/span&gt;  &lt;span class="sx"&gt;%[echo "-----&amp;gt; Be sure to edit 'shared/log/puma.stderr.log'."]&lt;/span&gt;

  &lt;span class="n"&gt;queue&lt;/span&gt;  &lt;span class="sx"&gt;%[echo "-----&amp;gt; Be sure to edit '#{deploy_to}/#{shared_path}/config/database.yml'."]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;#这个代码块表示运行 mina deploy时执行的命令&lt;/span&gt;
&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"Deploys the current version to the server."&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:deploy&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:environment&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="ss"&gt;:before_hook&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;#重新拉git服务器上的最新版本，即使没有改变&lt;/span&gt;
    &lt;span class="n"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;:'git:clone'&lt;/span&gt;
    &lt;span class="c1"&gt;#重新设定shared_path位置&lt;/span&gt;
    &lt;span class="n"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;:'deploy:link_shared_paths'&lt;/span&gt;
    &lt;span class="n"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;:'bundle:install'&lt;/span&gt;
    &lt;span class="n"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;:'rails:db_migrate'&lt;/span&gt;
    &lt;span class="n"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;:'rails:assets_precompile'&lt;/span&gt;
    &lt;span class="n"&gt;invoke&lt;/span&gt; &lt;span class="ss"&gt;:'deploy:cleanup'&lt;/span&gt;

    &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="ss"&gt;:launch&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="s2"&gt;"mkdir -p &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;deploy_to&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/tmp/"&lt;/span&gt;
      &lt;span class="c1"&gt;# queue "chown -R www-data #{deploy_to}"&lt;/span&gt;
      &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="s2"&gt;"touch &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;deploy_to&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;current_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/tmp/restart.txt"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样一来mina的基本配置就完成，接下来只要将你开发环境的项目上传到git服务器，然后运行下面的命令就完成了&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mina deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成部署后，你就可以在指定的服务器目录下看到你的项目，目录结构如下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;current -当前版本目录也就是项目目录&lt;/li&gt;
&lt;li&gt;last_version -版本号&lt;/li&gt;
&lt;li&gt;releases/ -过去的版本&lt;/li&gt;
&lt;li&gt;scm/&lt;/li&gt;
&lt;li&gt;shared/ 先前shared_path所设定另外拉出来的文件都在这里&lt;/li&gt;
&lt;li&gt;tmp/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里需要注意的几点&lt;br&gt;
1.shared_path里面的文件不仅仅是表示这些文件会在服务器目录中出现在另外的目录里，也表示这些文件或者目录不会受到git版本库的控制，也就是说这些文件的配置必须在你服务器中手动去配置，这两个文件包括database.yml和secrets.yml,在shared/config目录下&lt;br&gt;
2.针对deploy最好在服务器创建一个使用者，并针对他创建一个ssh authorized_keys,这里直接使用了root身份，参考&lt;a href="http://segmentfault.com/a/1190000002911599"&gt;centos7 服务器部署ssh证书授权登录&lt;/a&gt;，这样做能避免每次部署的时候都需要输入服务器账号密码&lt;/p&gt;

&lt;h3 id="可能会遇到的问题"&gt;可能会遇到的问题&lt;/h3&gt;

&lt;p&gt;由于生产环境一般会搭配类似于&lt;code&gt;postgresql&lt;/code&gt;等成熟数据库，这里我就举出一个搭建&lt;code&gt;postgresql&lt;/code&gt;，首先是启动数据库时（centos 7下），如果遇到问题请使用下面的命令就能看到详细的错误信息&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl status postgresql-9.4.service -l 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在跑&lt;code&gt;mina deploy&lt;/code&gt;时可能会报类似于这样的一个错误&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Gem::LoadError: Specified 'postgresql' for database adapter, but the gem is not loaded. Add `gem 'pg'` to your Gemfile (and ensure its version is at the minimum required by ActiveRecord).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从错误信息上能很明显的看出是因为没有安装pg这个包导致的，但是有一种情况是明明在项目的&lt;code&gt;Gemfile&lt;/code&gt;上写上了pg但还是跑不过，造成这个的原因，可能是由于你的服务器环境缺少了pg的头文件导致的，如果是在centos下，只需要执行下面命令就能解决&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yum install postgresql-libs
yum install postgresql-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="puma"&gt;Puma&lt;/h3&gt;

&lt;p&gt;首先在你的&lt;code&gt;Gemfile&lt;/code&gt;里加上&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;puma&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在config目录下手动创建一个&lt;code&gt;puma.rb&lt;/code&gt;文件，配置&lt;code&gt;puma.rb&lt;/code&gt;文件&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="c1"&gt;#!/usr/bin/env puma&lt;/span&gt;

&lt;span class="c1"&gt;#rails的运行环境&lt;/span&gt;
&lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="s1"&gt;'production'&lt;/span&gt;
&lt;span class="n"&gt;threads&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;
&lt;span class="n"&gt;workers&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="c1"&gt;#项目名&lt;/span&gt;
&lt;span class="n"&gt;app_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ruby_sample"&lt;/span&gt;
&lt;span class="c1"&gt;#项目路径&lt;/span&gt;
&lt;span class="n"&gt;application_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/var/www/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;#这里一定要配置为项目路径下地current&lt;/span&gt;
&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;application_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/current"&lt;/span&gt;

&lt;span class="c1"&gt;#下面都是 puma的配置项&lt;/span&gt;
&lt;span class="n"&gt;pidfile&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;application_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/shared/tmp/pids/puma.pid"&lt;/span&gt;
&lt;span class="n"&gt;state_path&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;application_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/shared/tmp/sockets/puma.state"&lt;/span&gt;
&lt;span class="n"&gt;stdout_redirect&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;application_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/shared/log/puma.stdout.log"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;application_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/shared/log/puma.stderr.log"&lt;/span&gt;
&lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="s2"&gt;"unix://&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;application_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/shared/tmp/sockets/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.sock"&lt;/span&gt;
&lt;span class="n"&gt;activate_control_app&lt;/span&gt; &lt;span class="s2"&gt;"unix://&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;application_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/shared/tmp/sockets/pumactl.sock"&lt;/span&gt;

&lt;span class="c1"&gt;#后台运行&lt;/span&gt;
&lt;span class="n"&gt;daemonize&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;on_restart&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'On restart...'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;preload_app!&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里需要注意的地方&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;threads&lt;/code&gt; - &lt;code&gt;puma&lt;/code&gt;的线程数，第一个参数是最小的线程数，第二个参数是最大线程数&lt;/li&gt;
&lt;li&gt;bind - 这个指定的是&lt;code&gt;puma&lt;/code&gt;运行时产生的&lt;code&gt;socket&lt;/code&gt;，后面&lt;code&gt;nginx&lt;/code&gt;会用到&lt;/li&gt;
&lt;li&gt;这里所有对应的目录是在&lt;code&gt;deploy&lt;/code&gt;配置中配置的，如果需要更改配置目录，&lt;code&gt;deploy.rb&lt;/code&gt;也需要相应的更改&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="nginx"&gt;Nginx&lt;/h2&gt;

&lt;p&gt;下载安装&lt;code&gt;nginx&lt;/code&gt;后，打开&lt;code&gt;nginx&lt;/code&gt;的配置文件&lt;code&gt;nginx.conf&lt;/code&gt;进行配置&lt;/p&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;  &lt;span class="k"&gt;worker_processes&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;error_log&lt;/span&gt;  &lt;span class="n"&gt;/var/log/nginx/error.log&lt;/span&gt; &lt;span class="s"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;pid&lt;/span&gt;        &lt;span class="n"&gt;/var/run/nginx.pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kn"&gt;worker_connections&lt;/span&gt;  &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kn"&gt;include&lt;/span&gt;       &lt;span class="n"&gt;/etc/nginx/mime.types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kn"&gt;default_type&lt;/span&gt;  &lt;span class="nc"&gt;application/octet-stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="kn"&gt;log_format&lt;/span&gt;  &lt;span class="s"&gt;main&lt;/span&gt;  &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="nv"&gt;$remote_addr&lt;/span&gt; &lt;span class="s"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$remote_user&lt;/span&gt; &lt;span class="s"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$time_local&lt;/span&gt;&lt;span class="s"&gt;]&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;
                            &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="nv"&gt;$status&lt;/span&gt; &lt;span class="nv"&gt;$body_bytes_sent&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$http_referer&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;
                            &lt;span class="s"&gt;'"&lt;/span&gt;&lt;span class="nv"&gt;$http_user_agent&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$http_x_forwarded_for&lt;/span&gt;&lt;span class="s"&gt;"'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="kn"&gt;access_log&lt;/span&gt;  &lt;span class="n"&gt;/var/log/nginx/access.log&lt;/span&gt;  &lt;span class="s"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="kn"&gt;sendfile&lt;/span&gt;        &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="c1"&gt;#tcp_nopush     on;
&lt;/span&gt;
          &lt;span class="kn"&gt;keepalive_timeout&lt;/span&gt;  &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="c1"&gt;#gzip  on;
&lt;/span&gt;
          &lt;span class="c1"&gt;#include /etc/nginx/conf.d/*.conf;
&lt;/span&gt;          &lt;span class="kn"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;deploy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="s"&gt;unix:///var/www/ruby_sample/shared/tmp/sockets/ruby_sample.sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;your.server.domain.ip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# change to match your URL
&lt;/span&gt;              &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/var/www/ruby_sample/current/public&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# I assume your app is located at this location
&lt;/span&gt;
              &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://deploy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# match the name of upstream directive which is defined above
&lt;/span&gt;                  &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;

              &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;^/assets/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="c1"&gt;# Per RFC2616 - 1 year maximum expiry
&lt;/span&gt;                  &lt;span class="kn"&gt;expires&lt;/span&gt; &lt;span class="s"&gt;1y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="kn"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;Cache-Control&lt;/span&gt; &lt;span class="s"&gt;public&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                          &lt;span class="c1"&gt;# Some browsers still send conditional-GET requests if there's a
&lt;/span&gt;                  &lt;span class="c1"&gt;# Last-Modified header or an ETag header even if they haven't
&lt;/span&gt;                  &lt;span class="c1"&gt;# reached the expiry date sent in the Expires header.
&lt;/span&gt;                  &lt;span class="kn"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;Last-Modified&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="kn"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;ETag&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="kn"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里只需要注意的是&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;upstream中 server 要配置成你在puma中bind的 socket就行了&lt;/li&gt;
&lt;li&gt;root要设置成你服务器项目的根目录，也就是&lt;code&gt;puma.rb&lt;/code&gt;中的 &lt;code&gt;directory&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下里只需要重启nginx服务器，整个rails的环境就搭建完成了&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  nginx -s reload

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果完成了配置后访问站点是504，那么可能是两种情况，一是服务器防火墙问题，二是rails环境密钥的问题，请在&lt;a href="http://segmentfault.com/a/1190000002911605"&gt;使用passenger在Centos7部署nginx+Ruby on Rails&lt;/a&gt;中寻找答案&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Laravel(2) 登录重写</title>
    <link rel="alternate" href="http://blog.example.com/2015/06/16/laravel-2-login-rewrite/"/>
    <id>http://blog.example.com/2015/06/16/laravel-2-login-rewrite/</id>
    <published>2015-06-17T00:06:00+08:00</published>
    <updated>2015-06-17T00:11:48+08:00</updated>
    <summary type="html">&lt;h3 id="laravel-登录重写"&gt;laravel 登录重写&lt;/h3&gt;

&lt;p&gt;权限控制是几乎每套成熟系统不可缺少的一部分，我们使用的权限控制方法是rbac，我将在这个系列的文章一步步完成一个比较复杂的rbac权限控制。&lt;/p&gt;

&lt;p&gt;rbac权限控制是一个非常成熟的权限控制系统，其原理是给每个用户一个或多个角色 而每个角色对系统相应模块有访问权限,具体理论知识不多介绍。在我完成这个权限控制系统中，我将普通用户和管理员用户分开在数据库中存储，我们先完成普通用户的登录，这一部分相对于管理员用户会比较简单，同时也让大家理解下登录的流程。&lt;/p&gt;

&lt;h5 id="未登录用户跳转到登录页面"&gt;未登录用户跳转到...&lt;/h5&gt;</summary>
    <content type="html">&lt;h3 id="laravel-登录重写"&gt;laravel 登录重写&lt;/h3&gt;

&lt;p&gt;权限控制是几乎每套成熟系统不可缺少的一部分，我们使用的权限控制方法是rbac，我将在这个系列的文章一步步完成一个比较复杂的rbac权限控制。&lt;/p&gt;

&lt;p&gt;rbac权限控制是一个非常成熟的权限控制系统，其原理是给每个用户一个或多个角色 而每个角色对系统相应模块有访问权限,具体理论知识不多介绍。在我完成这个权限控制系统中，我将普通用户和管理员用户分开在数据库中存储，我们先完成普通用户的登录，这一部分相对于管理员用户会比较简单，同时也让大家理解下登录的流程。&lt;/p&gt;

&lt;h5 id="未登录用户跳转到登录页面"&gt;未登录用户跳转到登录页面&lt;/h5&gt;

&lt;p&gt;当我们访问某些一定要登录后才能使用的功能时 我们往往会有一个功能就是 如果没有登录的用户，就会直接跳转到登录功能 在laravel已经提供的代码中我们可以非常轻松完成这个功能&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeController&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'auth'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/home'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'这是首页'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们在随便一个需要进行登录才能使用的控制器中使调用auth这个控制器就可以了，这个控制器会去检查session中是否有登录信息来进行判断是否有没有登录 那么这个&amp;#39;auth&amp;#39;中间件在哪呢？&lt;/p&gt;

&lt;p&gt;laravel中所有中间件都在app/Http/Kernel中注册&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$routeMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'auth'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'App\Http\Middleware\Authenticate'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'auth.basic'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Illuminate\Auth\Middleware\AuthenticateWithBasicAuth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'guest'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'App\Http\Middleware\RedirectIfAuthenticated'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'admin_auth'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'App\Http\Middleware\AdminPermissionCheck'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个数组中key是中间件的别名 value是中间件的路径 由此我们可以找到别名为auth的中间件&lt;/p&gt;

&lt;p&gt;找到App\Http\Middleware\Authenticate&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Closure&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;guest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Unauthorized.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//这个方法会跳转到Auth控制器的getLogin方法 
&lt;/span&gt;                &lt;span class="c1"&gt;//如果没有 那么会自动跳转的视图文件夹下的auth login
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;guest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'auth/login'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;handle方法是调用中间件时调用的方法  其中guest是判断有没有登录的方法 这里我们最有可能需要改的地方就是如果没有登录跳转的方法  如上面代码所示 跳转的路径为auth/login（这个路径已经在路由中配好，跳转到Auth控制器中得getLogin方法）&lt;/p&gt;

&lt;h5 id="建立一个登录视图"&gt;建立一个登录视图&lt;/h5&gt;

&lt;p&gt;在AuthController中建立一个登录视图&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getLogin&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"auth.login"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id="表单数据验证"&gt;表单数据验证&lt;/h5&gt;

&lt;p&gt;表单数据验证在实现部分是postLogin方法中的 UserLoginRequest $req&lt;br&gt;
我们建立一个请求类来对表单进行数据验证 使用laravel 提供的php artsian make:request 能非常轻松的建立一个请求类&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserLoginRequest&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="sd"&gt;/**
   * Determine if the user is authorized to make this request.
   *
   * @return bool
   */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="sd"&gt;/**
   * Get the validation rules that apply to the request.
   *
   * @return array
   */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="c1"&gt;//再这里对表单提交字段进行过滤
&lt;/span&gt;      &lt;span class="s1"&gt;'identity'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'required|min:3|max:16'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'required|min:6|max:16'&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;sanitize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id="登录处理方法"&gt;登录处理方法&lt;/h5&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;postLogin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserLoginRequest&lt;/span&gt; &lt;span class="nv"&gt;$req&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

   &lt;span class="c1"&gt;//这里对传递过来得字段进行了处理 这个函数为我自己定义的函数 仅仅是为了演示用
&lt;/span&gt;     &lt;span class="nv"&gt;$identity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;generateLoginIdentity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
     &lt;span class="nv"&gt;$identity&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//验证用户账号密码
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;attempt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$indentity&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
      &lt;span class="c1"&gt;//登录成功 记录用户登录时间和登录ip
&lt;/span&gt;      &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'='&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="c1"&gt;// 触发一个事件
&lt;/span&gt;      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;\App\Events\UserLogin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
      &lt;span class="c1"&gt;//重定向到想要访问的页面
&lt;/span&gt;      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;intended&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如上述代码所示 你可以对传过来得数据根据业务需要做进一步的处理&lt;/p&gt;

&lt;p&gt;验证登录用户功能的代码是这一段$this-&amp;gt;auth-&amp;gt;attempt($indentity) 如果验证成功回返回true，这个函数是laravel自带Auth的一个方法 功能是去User表中匹配传过来的字段，如果需要验证更多字段,当验证成功后会将登录信息存入session中。当然Auth去查找匹配的表是可以更改的，我会在后面实现管理员用户的登录功能的时候演示怎么修改。&lt;/p&gt;

&lt;p&gt;然后可以在下面的代码中继续完成你的业务逻辑  如我代码中所示的触发一个事件来记录登录事件和登录ip&lt;/p&gt;

&lt;h5 id="已经登录-访问登录页面的自动跳转"&gt;已经登录 访问登录页面的自动跳转&lt;/h5&gt;

&lt;p&gt;如果已经登录了 再访问登录页面 显然我们不需要再出现登录视图让其登录，我们需要将其跳转到其他路径，这个路径依然是可以修改的&lt;/p&gt;

&lt;p&gt;首先我们看看再Auth控制器中哪里对是否已经登录进行判断&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Guard&lt;/span&gt; &lt;span class="nv"&gt;$auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Registrar&lt;/span&gt; &lt;span class="nv"&gt;$registrar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;


    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$auth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;registrar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$registrar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'guest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'except'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'getLogout'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中这个except表示getLogout这个方法将不会受到这个中间件的影响 getLogout通常是登出方法&lt;/p&gt;

&lt;p&gt;在这个控制器的构造方法调用了一个中间件来对是否已经登录进行判断 ，通过查找kernel.php我们找到这个中间件&lt;br&gt;
是App\Http\Middleware\RedirectIfAuthenticated.php&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Closure&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;check&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
                     &lt;span class="c1"&gt;//跳转的路径
&lt;/span&gt;      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RedirectResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只要修改了上面代码中跳转的路径就可以了&lt;/p&gt;

&lt;h3 id="总结"&gt;总结&lt;/h3&gt;

&lt;p&gt;我们可以看到 laravel已经给我们封装了很多登录相关需要用到的功能 ，非常的完善，但也给了我们很大的自由随意去修改登录相关的流程，我们可以随意根据需要业务逻辑修改登录的功能。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>使用passenger在Centos7部署nginx+Ruby on Rails</title>
    <link rel="alternate" href="http://blog.example.com/2015/06/16/deploy-rails-nginx/"/>
    <id>http://blog.example.com/2015/06/16/deploy-rails-nginx/</id>
    <published>2015-06-16T15:45:00+08:00</published>
    <updated>2015-06-16T18:09:50+08:00</updated>
    <summary type="html">&lt;h2 id="passenger"&gt;passenger&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;passenger&lt;/code&gt;是一个能快速搭建web环境的工具，它能快速的将&lt;code&gt;nginx&lt;/code&gt;和&lt;code&gt;passenger&lt;/code&gt;部署到你的服务器中，是部署&lt;code&gt;ruby&lt;/code&gt;环境就如同php环境那样简单快速，让人愉悦。下面我将使用这个工具将一个几乎空白的web服务器打造成一个高效的ruby服务器&lt;/p&gt;

&lt;h2 id="centos7"&gt;centos7&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;centos7&lt;/code&gt;是最新的centos版本带来了一系列新特性，包括对Docker的支持和性能的提高，&lt;a href="http://www.flexense.com/centos6_vs_centos7_nas_performance.html"&gt;centos 6和 centos 7性能对比&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="安装ruby环境"&gt;安装ruby环境&lt;/h2&gt;

&lt;p&gt;首先下载&lt;code&gt;rvm&lt;/code&gt;(ruby虚拟机)&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl...&lt;/code&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;h2 id="passenger"&gt;passenger&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;passenger&lt;/code&gt;是一个能快速搭建web环境的工具，它能快速的将&lt;code&gt;nginx&lt;/code&gt;和&lt;code&gt;passenger&lt;/code&gt;部署到你的服务器中，是部署&lt;code&gt;ruby&lt;/code&gt;环境就如同php环境那样简单快速，让人愉悦。下面我将使用这个工具将一个几乎空白的web服务器打造成一个高效的ruby服务器&lt;/p&gt;

&lt;h2 id="centos7"&gt;centos7&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;centos7&lt;/code&gt;是最新的centos版本带来了一系列新特性，包括对Docker的支持和性能的提高，&lt;a href="http://www.flexense.com/centos6_vs_centos7_nas_performance.html"&gt;centos 6和 centos 7性能对比&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="安装ruby环境"&gt;安装ruby环境&lt;/h2&gt;

&lt;p&gt;首先下载&lt;code&gt;rvm&lt;/code&gt;(ruby虚拟机)&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl -L get.rvm.io | bash -s stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装&lt;code&gt;rvm&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; /etc/profile.d/rvm.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装&lt;code&gt;ruby&lt;/code&gt;(请选择官网上最新的版本，使用&lt;code&gt;ruby&lt;/code&gt;就要一直坚定的使用其最新版本)&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rvm install 2.2.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完成后只要运行&lt;code&gt;ruby -v&lt;/code&gt;有显示版本号就证明已经安装成功了&lt;/p&gt;

&lt;h2 id="安装passenger-和-nginx"&gt;安装Passenger 和 Nginx&lt;/h2&gt;

&lt;p&gt;首先使用&lt;code&gt;gem&lt;/code&gt;安装&lt;code&gt;passenger&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gem install passenger
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于&lt;code&gt;nginx&lt;/code&gt;不支持动态的模块载入，所以要使用&lt;code&gt;passenger&lt;/code&gt;来进行编译安装由&lt;code&gt;passenger&lt;/code&gt;修改过的&lt;code&gt;nginx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;接下来安装&lt;code&gt;nginx&lt;/code&gt;+&lt;code&gt;passenger&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;passenger-install-nginx-module
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行了这个命令后，按照提示一步步安装&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1.Yes: download, compile and install Nginx for me. (recommended)
The easiest way to get started. A stock Nginx 1.0.10 with Passenger
support, but with no other additional third party modules, will be
installed for you to a directory of your choice.

2.No: I want to customize my Nginx installation. (for advanced users)
Choose this if you want to compile Nginx with more third party modules
besides Passenger, or if you need to pass additional options to Nginx's
'configure' script. This installer will 1) ask you for the location of
the Nginx source code, 2) run the 'configure' script according to your
instructions, and 3) run 'make install'.
Whichever you choose, if you already have an existing Nginx configuration file,
then it will be preserved.

Enter your choice (1 or 2) or press Ctrl-C to abort:

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当遇到这个选择时，建议选择1，1代表自动完整安装并配置nginx,2是代表根据自己需求定制nginx.&lt;/p&gt;

&lt;p&gt;安装完成后系统会提示，&lt;code&gt;nginx&lt;/code&gt;安装的目录，在&lt;code&gt;centos7&lt;/code&gt;下默认是安装在&lt;code&gt;/opt/nginx&lt;/code&gt;下,配置文件是默认在&lt;code&gt;/opt/nginx/conf/nginx.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;打开&lt;code&gt;nginx.conf&lt;/code&gt;我们可以看到，&lt;code&gt;passenger&lt;/code&gt;已经在&lt;code&gt;nginx&lt;/code&gt;的配置文件上做了一点小配置&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;passenger_root /usr/local/rvm/gems/ruby-2.2.1/gems/passenger-5.0.10;
passenger_ruby /usr/local/rvm/gems/ruby-2.2.1/wrappers/ruby;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="安装rails并初始化一个rails项目"&gt;安装rails并初始化一个rails项目&lt;/h2&gt;

&lt;p&gt;使用&lt;code&gt;gem&lt;/code&gt;安装&lt;code&gt;rails&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gem install rails
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初始化一个&lt;code&gt;rails&lt;/code&gt;项目&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails new sample_app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一次初始化&lt;code&gt;rails&lt;/code&gt;时一般会报出缺少&lt;code&gt;gem&lt;/code&gt;的警告，此时只需要将&lt;code&gt;rails&lt;/code&gt;的镜像改为淘宝镜像，详见&lt;a href="http://ruby.taobao.org"&gt;http://ruby.taobao.org&lt;/a&gt;,然后执行&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当执行完毕后，一个&lt;code&gt;rails&lt;/code&gt;项目的初始化就完成了&lt;/p&gt;

&lt;h2 id="配置nginx"&gt;配置nginx&lt;/h2&gt;

&lt;p&gt;打开配置文件&lt;br&gt;
&lt;code&gt;&lt;br&gt;
vim /opt/nginx/conf/nginx.conf&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
这里给出一份最简单能运行的&lt;code&gt;nginx.conf&lt;/code&gt;（注意：rails项目的目录是/opt/www）&lt;/p&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;worker_processes&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;worker_connections&lt;/span&gt;  &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;passenger_root&lt;/span&gt; &lt;span class="n"&gt;/usr/local/rvm/gems/ruby-2.2.1/gems/passenger-5.0.10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;passenger_ruby&lt;/span&gt; &lt;span class="n"&gt;/usr/local/rvm/gems/ruby-2.2.1/wrappers/ruby&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kn"&gt;include&lt;/span&gt;       &lt;span class="s"&gt;mime.types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;default_type&lt;/span&gt;  &lt;span class="nc"&gt;application/octet-stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kn"&gt;sendfile&lt;/span&gt;        &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;keepalive_timeout&lt;/span&gt;  &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;#监听的端口
&lt;/span&gt;          &lt;span class="kn"&gt;listen&lt;/span&gt;       &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kn"&gt;server_name&lt;/span&gt;  &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="s"&gt;.0.0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="c1"&gt;#web根目录，一定是rails项目下的public
&lt;/span&gt;          &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/var/www/sample_app/public/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="c1"&gt;#一定要记得将这个选项设置为on
&lt;/span&gt;          &lt;span class="kn"&gt;passenger_enabled&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;    
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sbin/nginx -t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果没有报错，那说明配置成功了。那么已经万事大吉了吗？并没有！！&lt;/p&gt;

&lt;h2 id="配置centos7防火墙"&gt;配置Centos7防火墙&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Centos7&lt;/code&gt;后已经废弃了原来的&lt;code&gt;iptables&lt;/code&gt;，改而使用&lt;code&gt;firewall&lt;/code&gt;，默认情况下&lt;code&gt;centos7&lt;/code&gt;系统不允许任何外来访问，就算你把&lt;code&gt;firewall&lt;/code&gt;关了也没用，所以必须配置firewall&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;firewall-cmd --zone&lt;span class="o"&gt;=&lt;/span&gt;public --add-port&lt;span class="o"&gt;=&lt;/span&gt;8080/tcp --permanent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个命令表示，允许外部访问8080端口，重载一下&lt;code&gt;firewall&lt;/code&gt;的配置，就外部就能访问服务器的8080端口了&lt;/p&gt;

&lt;h2 id="配置rails的生产环境"&gt;配置Rails的生产环境&lt;/h2&gt;

&lt;p&gt;配置完&lt;code&gt;Centos7&lt;/code&gt;的防火墙后，访问&lt;code&gt;rails&lt;/code&gt;程序时就会报出一个403的forbidden错误，仔细查看日志后，发现了问题了的原因&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;App 6361 stderr: [ 2015-06-16 11:27:24.1412 6376/0x00000001d35760(Worker 1) utils.rb:85 ]: *** Exception RuntimeError in Rack application object (Missing `secret_token` and `secret_key_base` for 'production' environment, set these values in `config/secrets.yml`) (process 6376, thread 0x00000001d35760(Worker 1)):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个错误表示&lt;code&gt;Rails&lt;/code&gt;生产环境下的密钥没有配置。在&lt;code&gt;nginx&lt;/code&gt;上跑&lt;code&gt;rails&lt;/code&gt;一般只有在生产环境下才会使用，因而&lt;code&gt;passenger&lt;/code&gt;默认下就是&lt;code&gt;rails&lt;/code&gt;环境设置为生产环境，而&lt;code&gt;rails&lt;/code&gt;初始化时默认没有对生产环境进行密钥配置。这时就需要我们自己去配置&lt;code&gt;rails&lt;/code&gt;的密钥了&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;rails&lt;/code&gt;的&lt;code&gt;Gemfile&lt;/code&gt;中加入&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'dotenv-rails'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后运行&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完这个&lt;code&gt;gem&lt;/code&gt;后就可以配置我们的生产环境密钥了&lt;/p&gt;

&lt;p&gt;首先在&lt;code&gt;sample_app&lt;/code&gt;目录下建立一个&lt;code&gt;.env&lt;/code&gt;文件&lt;/p&gt;

&lt;p&gt;然后运行&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rake secret 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个命令会随机生成一个安全密钥，将这个密钥复制下来，然后在&lt;code&gt;.env&lt;/code&gt;中添加&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;SECRET_KEY_BASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;你的密钥&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后修改sample_app目录下的config/secrets.yml &lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="s"&gt;development&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;secret_key_base&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= ENV["SECRET_KEY_BASE"] %&amp;gt;&lt;/span&gt;

&lt;span class="s"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
   &lt;span class="s"&gt;secret_key_base&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= ENV["SECRET_KEY_BASE"] %&amp;gt;&lt;/span&gt;

&lt;span class="s"&gt;production&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;secret_key_base&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= ENV["SECRET_KEY_BASE"] %&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样一来密钥配置就完成了，重启&lt;code&gt;nginx&lt;/code&gt;就能成功访问到&lt;code&gt;rails&lt;/code&gt;项目了&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>centos7 服务器部署ssh证书授权登录</title>
    <link rel="alternate" href="http://blog.example.com/2015/06/15/centos7-deploy-ssh/"/>
    <id>http://blog.example.com/2015/06/15/centos7-deploy-ssh/</id>
    <published>2015-06-15T22:57:00+08:00</published>
    <updated>2015-06-15T23:26:53+08:00</updated>
    <summary type="html">&lt;h3 id="使用ssh证书授权登录的必要性"&gt;使用ssh证书授权登录的必要性&lt;/h3&gt;

&lt;p&gt;普通用户登录时，以往的做法往往是使用账号密码登录，但是这样的登录方式风险相当高，使用密钥登录能大大降低这个风险，这个密钥是针对每台计算机生成的独一无二的凭证，保存在登录用户的电脑中，只能通过登录用户电脑的证书授权才能登录服务器。&lt;/p&gt;

&lt;h3 id="登录用户电脑操作"&gt;登录用户电脑操作&lt;/h3&gt;

&lt;h4 id="建立~/.ssh目录（如果没有）"&gt;建立~/.ssh目录（如果没有）&lt;/h4&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ls -al ~/.ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="根据邮箱创建私钥"&gt;根据邮箱创建私钥&lt;/h4&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh-keygen -t rsa -b 4096 -C &lt;span class="s2"&gt;&amp;quot;your_email@example.com&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按照流程走完...&lt;/p&gt;</summary>
    <content type="html">&lt;h3 id="使用ssh证书授权登录的必要性"&gt;使用ssh证书授权登录的必要性&lt;/h3&gt;

&lt;p&gt;普通用户登录时，以往的做法往往是使用账号密码登录，但是这样的登录方式风险相当高，使用密钥登录能大大降低这个风险，这个密钥是针对每台计算机生成的独一无二的凭证，保存在登录用户的电脑中，只能通过登录用户电脑的证书授权才能登录服务器。&lt;/p&gt;

&lt;h3 id="登录用户电脑操作"&gt;登录用户电脑操作&lt;/h3&gt;

&lt;h4 id="建立~/.ssh目录（如果没有）"&gt;建立~/.ssh目录（如果没有）&lt;/h4&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ls -al ~/.ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="根据邮箱创建私钥"&gt;根据邮箱创建私钥&lt;/h4&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh-keygen -t rsa -b 4096 -C &lt;span class="s2"&gt;"your_email@example.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按照流程走完后会在 ~/.ssh目录下看到id_rsa, id_rsa.pub文件 第一个是私有密钥 第二个是拥有密钥&lt;/p&gt;

&lt;h4 id="复制id_rsa.pub中的内容（mac）"&gt;复制id_rsa.pub中的内容（mac）&lt;/h4&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cat id_rsa.pub | pbcopy 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="服务器配置(centos7)"&gt;服务器配置(centos7)&lt;/h3&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vim /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将如下配置前的#号去掉&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#禁用root账户登录，非必要，但为了安全性，请配置&lt;/span&gt;
&lt;span class="no"&gt;PermitRootLogin&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;

&lt;span class="c1"&gt;# 是否让 sshd 去检查用户家目录或相关档案的权限数据，&lt;/span&gt;
&lt;span class="c1"&gt;# 这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。&lt;/span&gt;
&lt;span class="c1"&gt;# 例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入&lt;/span&gt;
&lt;span class="no"&gt;StrictModes&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;

&lt;span class="c1"&gt;# 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。&lt;/span&gt;
&lt;span class="c1"&gt;# 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内&lt;/span&gt;
&lt;span class="no"&gt;RSAAuthentication&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="no"&gt;PubkeyAuthentication&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="no"&gt;AuthorizedKeysFile&lt;/span&gt;      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;authorized_keys&lt;/span&gt;

&lt;span class="c1"&gt;# 有了证书登录了，就禁用密码登录吧，安全要紧&lt;/span&gt;
&lt;span class="no"&gt;PasswordAuthentication&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="将密钥写到一张文件去-如test-然后将这个文件导入-～/.ssh/authorized_keys"&gt;将密钥写到一张文件去 如test 然后将这个文件导入 ～/.ssh/authorized_keys&lt;/h4&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cat &lt;span class="nb"&gt;test&lt;/span&gt; &amp;gt;&amp;gt; ～/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="启动ssh服务"&gt;启动ssh服务&lt;/h4&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;service sshd start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有可能会提示&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Redirecting to /bin/systemctl start  sshd.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只要按照提示操作就能开启ssh服务&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/bin/systemctl start  sshd.service
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="这样一来在计算机持有密钥的情况下就可以不使用账号密码登录服务器了"&gt;这样一来在计算机持有密钥的情况下就可以不使用账号密码登录服务器了&lt;/h4&gt;
</content>
  </entry>
  <entry>
    <title>Laravel(1) 注册重写</title>
    <link rel="alternate" href="http://blog.example.com/2015/06/09/laravel-1-rewrite-register/"/>
    <id>http://blog.example.com/2015/06/09/laravel-1-rewrite-register/</id>
    <published>2015-06-09T17:41:00+08:00</published>
    <updated>2015-06-15T23:26:46+08:00</updated>
    <summary type="html">&lt;h5 id="配置路由"&gt;配置路由&lt;/h5&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;apos;auth&amp;apos;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;apos;Auth\AuthController&amp;apos;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种路由配置方式对应的路径方式是 访问的方式+方法名 如在浏览器中使用get方式去访问register方法 那么这个路由会自动配置到这个类下面的getRegister方法。post也是一样&lt;/p&gt;

&lt;h5 id="建立一个自己的注册页面"&gt;建立一个自己的注册页面&lt;/h5&gt;

&lt;p&gt;我在AuthControlle里建立一个自己的视图&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getRegister&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;h5 id="配置路由"&gt;配置路由&lt;/h5&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="s1"&gt;'auth'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Auth\AuthController'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种路由配置方式对应的路径方式是 访问的方式+方法名 如在浏览器中使用get方式去访问register方法 那么这个路由会自动配置到这个类下面的getRegister方法。post也是一样&lt;/p&gt;

&lt;h5 id="建立一个自己的注册页面"&gt;建立一个自己的注册页面&lt;/h5&gt;

&lt;p&gt;我在AuthControlle里建立一个自己的视图&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getRegister&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"auth.register"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面已经说了路由的解析方式 只要配好路由就可以了&lt;/p&gt;

&lt;h5 id="我们需要定义一个处理这个的注册处理类"&gt;我们需要定义一个处理这个的注册处理类&lt;/h5&gt;

&lt;p&gt;接下来我会把所有的代码贴出来再代码中去讲解怎么重写 同样这个文件位于AuthController下&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;postRegister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserRegisterRequest&lt;/span&gt; &lt;span class="nv"&gt;$req&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                       &lt;span class="c1"&gt;//验证通过 注册用户
&lt;/span&gt;      &lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'register_ip'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;registrar&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;intended&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大家会发现整个注册功能非常简单 那么具体可以在哪里做了注册的限制呢&lt;br&gt;
其实是在UserRegisterRequest这个文件里去对所有填写的表单数据进行了控制&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;App\Http\Requests&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;App\Http\Requests\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserRegisterRequest&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="sd"&gt;/**
   * Determine if the user is authorized to make this request.
   *
   * @return bool
   */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="sd"&gt;/**
   * Get the validation rules that apply to the request.
   *
   * @return array
   */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="c1"&gt;//自定义的电话号码正则表达式
&lt;/span&gt;    &lt;span class="nv"&gt;$regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'constant.phone_number_regex'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="c1"&gt;//对注册表单提交的信息进行验证
&lt;/span&gt;      &lt;span class="s2"&gt;"username"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'min:3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'max:16'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'unique:users'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s2"&gt;"phone_number"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'min:3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'max:16'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'unique:users'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s2"&gt;"password"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'min:6'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'max:16'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'confirmed'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s2"&gt;"verify_code"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'digits:4'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="p"&gt;];&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;sanitize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以通过laravel自带的php artisan make:request 创建一个请求类&lt;br&gt;
这个类可以对所有请求的数据进行控制，在rule里面定义好规则就可以控制请求的的数据，如果符合规则那么会继续访问。&lt;/p&gt;

&lt;h4 id="改写注册添加数据操作"&gt;改写注册添加数据操作&lt;/h4&gt;

&lt;p&gt;注册的目的就是为了将符合条件的数据写入用户表中 既然改写了请求的数据 那么自然也要改写请求的操作&lt;/p&gt;

&lt;p&gt;注册成功后添加到用户数据库中 是在上面的 postRegister中的这一段代码来实现的&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;registrar&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;找到这段代码  这段代码位于 services下的Registrar.php下&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nv"&gt;$properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s1"&gt;'username'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
      &lt;span class="s1"&gt;'register_time'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;toDateTimeString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="s1"&gt;'register_ip'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'register_ip'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$properties&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将这个处理函数改成符合自己业务逻辑的函数就行了 &lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href="https://phphub.org/topics/737"&gt;Laravel 一步步实现权限控制（2） 登录重写&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>PostgreSQL 9.4 中使用jsonb</title>
    <link rel="alternate" href="http://blog.example.com/2015/06/09/postgresql-9-4-jsonb/"/>
    <id>http://blog.example.com/2015/06/09/postgresql-9-4-jsonb/</id>
    <published>2015-06-09T15:19:00+08:00</published>
    <updated>2015-06-09T16:36:49+08:00</updated>
    <summary type="html">&lt;p&gt;转载翻译自&lt;a href="http://nandovieira.com/using-postgresql-and-jsonb-with-ruby-on-rails"&gt;http://nandovieira.com/using-postgresql-and-jsonb-with-ruby-on-rails&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL 9.4 引入了&lt;code&gt;jsonb&lt;/code&gt;，一个新的列类型用于存储文档到你的关系数据库中。&lt;code&gt;jsonb&lt;/code&gt;和&lt;code&gt;json&lt;/code&gt;在更高的层面上看起来几乎是一样的，但在存储实现上是不同的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;jsonb&lt;/code&gt;的优势在于你可以轻易的整合关系型数据和非关系型数据，&lt;a href="http://obartunov.livejournal.com/175235.html"&gt;在性能方面，可以比大多数类似于MongoDB这样的非关系数据库更好&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="理解json和jsonb之间的不同"&gt;&lt;strong&gt;理解json和jsonb之间的不...&lt;/strong&gt;&lt;/h4&gt;</summary>
    <content type="html">&lt;p&gt;转载翻译自&lt;a href="http://nandovieira.com/using-postgresql-and-jsonb-with-ruby-on-rails"&gt;http://nandovieira.com/using-postgresql-and-jsonb-with-ruby-on-rails&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL 9.4 引入了&lt;code&gt;jsonb&lt;/code&gt;，一个新的列类型用于存储文档到你的关系数据库中。&lt;code&gt;jsonb&lt;/code&gt;和&lt;code&gt;json&lt;/code&gt;在更高的层面上看起来几乎是一样的，但在存储实现上是不同的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;jsonb&lt;/code&gt;的优势在于你可以轻易的整合关系型数据和非关系型数据，&lt;a href="http://obartunov.livejournal.com/175235.html"&gt;在性能方面，可以比大多数类似于MongoDB这样的非关系数据库更好&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="理解json和jsonb之间的不同"&gt;&lt;strong&gt;理解json和jsonb之间的不同&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;因此，两种列类型之间的区别是什么？当我们比较写入数据速度时，由于数据存储的方式的原因，&lt;code&gt;jsonb&lt;/code&gt;会比&lt;code&gt;json&lt;/code&gt;稍微的慢一点。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;json&lt;/code&gt;存储完整复制过来的文本输入，必须一遍又一遍的解析在你调用任何函数的时候。它不支持索引，但你可以为查询创建表达式索引。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jsonb&lt;/code&gt;存储的二进制格式，避免了重新解析数据结构。它支持索引，这意味着你可以不使用指定的索引就能查询任何路径。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他的不同包括，&lt;code&gt;json&lt;/code&gt;列会每次都解析存储的值，这意味着键的顺序要和输入的时候一样。但&lt;code&gt;jsonb&lt;/code&gt;不同，以二进制格式存储且不保证键的顺序。因此，如果你有软件需要依赖键的顺序，&lt;code&gt;jsonb&lt;/code&gt;可能不是你的应用的最佳选择。&lt;/p&gt;

&lt;p&gt;让我们运行一个简单的基准测试。在这个例子中，我使用下面这样一个&lt;code&gt;json&lt;/code&gt;数据结构：&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"twitter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"johndoe1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"github"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"johndoe1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"bio"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Labore impedit 
          aliquam sapiente dolore magni aliquid ipsa ad, enim, esse ut reprehenderit 
          quaerat deleniti fugit eaque. Vero eligendi voluptatibus atque, asperiores."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"blog"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://johndoe1.example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"interests"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"music"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"movies"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"programming"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;"newsletter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/fnando/f672c9243186933b3c8e"&gt;插入30000条完全一样的记录&lt;/a&gt;，我相信&lt;code&gt;jsonb&lt;/code&gt;在插入复杂结构时会慢一些。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Rehearsal ------------------------------------------------
insert jsonb   2.690000   0.590000   3.280000 ( &amp;gt;12.572343)
insert json    2.690000   0.590000   3.280000 ( 12.766534)
--------------------------------------- total: 6.560000sec

-----------------------------------------user     system      total        real
insert jsonb   2.680000   0.590000   3.270000 ( 13.206602)
insert json    2.650000   0.580000   3.230000 ( 12.577138)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;真正的差距在查询&lt;code&gt;json/jsonb&lt;/code&gt;列的时候。首先让我们看看这张表和索引。&lt;/p&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;serial&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="n"&gt;jsonb&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="s1"&gt;'{}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;preferences&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="s1"&gt;'{}'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;settings_index&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;twitter_settings_index&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'github'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;preferences_index&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'github'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意我们有一个GIN索引在&lt;code&gt;settings&lt;/code&gt;列上，两个给出的路径（github）表达式索引。在30000条数据中搜索Github用户名为john30000的记录（最后一个插入的记录），&lt;a href="https://gist.github.com/fnando/f672c9243186933b3c8e"&gt;会给出以下数字&lt;/a&gt;：&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Rehearsal -----------------------------------------------------------------
read jsonb (index column)       0.030000   0.030000   0.060000 (  3.673465)
read jsonb (expression index)   0.010000   0.010000   0.020000 (  0.087105)
read json (expression index)    0.010000   0.020000   0.030000 (  0.080121)
read json (no index)            0.060000   0.030000   0.090000 (113.206747)
-------------------------------------------------------- total: 0.200000sec

-----------------------------------------user     system      total        real
read jsonb (index column)       0.010000   0.020000   0.030000 (  0.092476)
read jsonb (expression index)   0.010000   0.010000   0.020000 (  0.078916)
read json (expression index)    0.010000   0.010000   0.020000 (  0.081908)
read json (no index)            0.050000   0.040000   0.090000 (110.761944)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和你看到的那样，表达式索引在两种数据类型中的性能几乎完全一样，所以它们在这里并没有实际的意义。剩下的两列不同的地方在于在查询列时有没有索引；&lt;code&gt;jsonb&lt;/code&gt;能在整列建立GIN/GIST索引，而&lt;code&gt;json&lt;/code&gt;不能建立这样的索引。这也是为什么这&lt;code&gt;json&lt;/code&gt;查询速度这么慢的原因。&lt;/p&gt;

&lt;p&gt;让我们检查下在没有索引的情况下查询分析器查询数据。&lt;/p&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;
&lt;span class="k"&gt;EXPLAIN&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;@&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'{"twitter": "john30000"}'&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;--                                      QUERY PLAN
-- -------------------------------------------------------------------------------------
--  Limit  (cost=28.23..31.96 rows=1 width=468)
--    -&amp;gt;  Bitmap Heap Scan on users  (cost=28.23..140.07 rows=30 width=468)
--          Recheck Cond: (settings @&amp;gt; '{"twitter": "john30000"}'::jsonb)
--          -&amp;gt;  Bitmap Index Scan on settings_index  (cost=0.00..28.23 rows=30 width=0)
--                Index Cond: (settings @&amp;gt; '{"twitter": "john30000"}'::jsonb)
&lt;/span&gt;
&lt;span class="k"&gt;EXPLAIN&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'twitter'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'john30000'&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;--                                QUERY PLAN
-- -------------------------------------------------------------------------
--  Limit  (cost=0.00..25.23 rows=1 width=468)
--    -&amp;gt;  Seq Scan on users  (cost=0.00..3784.00 rows=150 width=468)
--          Filter: ((preferences -&amp;gt;&amp;gt; 'twitter'::text) = 'john30000'::text)
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最重要的是，&lt;code&gt;json&lt;/code&gt;做的是顺序扫描，这意味着PostgreSQL将根据顺序一条一条往下找，直到找到符合条件的数据，同时记住查找这些数据时，每条记录中的JSON内容都会被解析，这将导致在复杂结构中查询速度变慢。&lt;/p&gt;

&lt;p&gt;但这些不会发生&lt;code&gt;jsonb&lt;/code&gt;列中，这种查找使用了索引，却并没有像使用表达式索引那样将速度优化的很好。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jsonb&lt;/code&gt;有一个需要注意的点是，&lt;code&gt;jsonb&lt;/code&gt;会一直顺序检索如果你使用&lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;操作符在一个没有表达式索引的路径上。&lt;/p&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;
&lt;span class="k"&gt;EXPLAIN&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'twitter'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'johndoe30000'&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;--                                QUERY PLAN
-- -------------------------------------------------------------------------
--  Limit  (cost=0.00..25.23 rows=1 width=468)
--    -&amp;gt;  Seq Scan on users  (cost=0.00..3784.00 rows=150 width=468)
--          Filter: ((settings -&amp;gt;&amp;gt; 'twitter'::text) = 'johndoe30000'::text)
-- (3 rows)
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因此，在你不提前知道查询哪个&lt;code&gt;json&lt;/code&gt;数据中的键或者查询所有&lt;code&gt;json&lt;/code&gt;路径的情况下，请确保你定义了GIN/GIST索引和使用&lt;code&gt;@&amp;gt;&lt;/code&gt;（或者其他有利于索引的操作符）&lt;/p&gt;

&lt;h4 id="json转化为jsonb"&gt;&lt;strong&gt;json转化为jsonb&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;如果你已经使用了&lt;code&gt;json&lt;/code&gt;格式或者&lt;code&gt;text&lt;/code&gt;格式的列存储JSON数据，你可以将他们转化为&lt;code&gt;jsonb&lt;/code&gt;，因而你可以依靠列索引。&lt;/p&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="n"&gt;preferences_jsonb&lt;/span&gt; &lt;span class="n"&gt;jsonb&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="s1"&gt;'{}'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;preferences_jsonb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;jsonb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="n"&gt;preferences_jsonb&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;RENAME&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="n"&gt;preferences&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="n"&gt;preferences_json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;RENAME&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="n"&gt;preferences_jsonb&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- Don't remove the column until you're sure everything is working.
-- ALTER TABLE users DROP COLUMN preferences_json;
&lt;/span&gt;
&lt;span class="k"&gt;COMMIT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在你已经知道了&lt;code&gt;json&lt;/code&gt;是如何工作的，让我们看看在Ruby on Rails中是怎么使用的。&lt;/p&gt;

&lt;h4 id="在ruby-on-rails中使用jsonb"&gt;&lt;strong&gt;在Ruby on Rails中使用jsonb&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Rails从4.2版本开始支持&lt;code&gt;jsonb&lt;/code&gt;，使用他跟使用&lt;code&gt;string&lt;/code&gt;或&lt;code&gt;text&lt;/code&gt;类型的列一样简单，在下面的代码中，你将看到如何添加&lt;code&gt;jsonb&lt;/code&gt;类型的列到已经存在的表中。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# db/migrate/*_create_users.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;enable_extension&lt;/span&gt; &lt;span class="s1"&gt;'citext'&lt;/span&gt;

    &lt;span class="n"&gt;create_table&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;citext&lt;/span&gt; &lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jsonb&lt;/span&gt; &lt;span class="ss"&gt;:preferences&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="s1"&gt;'{}'&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;add_index&lt;/span&gt;  &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:preferences&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;using: :gin&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# db/migrate/*_add_jsonb_column_to_users.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddJsonbColumnToUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;add_column&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:preferences&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:jsonb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="s1"&gt;'{}'&lt;/span&gt;
    &lt;span class="n"&gt;add_index&lt;/span&gt;  &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:preferences&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;using: :gin&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，我们已经定义了GIN类型的索引，如果你想对给出的路径创建表达式索引，你必须使用&lt;code&gt;execute&lt;/code&gt;。在这个例子中，Rails不知道怎么使用ruby来转化这个索引，所以你最好选择将格式转为SQL。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# config/initializers/active_record.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;active_record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;schema_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:sql&lt;/span&gt;

&lt;span class="c1"&gt;# db/migrate/*_add_index_to_preferences_path_on_users.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddIndexToPreferencesPathOnUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="no"&gt;SQL&lt;/span&gt;&lt;span class="sh"&gt;
      CREATE INDEX user_prefs_newsletter_index ON users ((preferences-&amp;gt;&amp;gt;'newsletter'))
&lt;/span&gt;&lt;span class="no"&gt;    SQL&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你的模型不需要做任何配置。你只需要创建支持&lt;code&gt;json&lt;/code&gt;序列化的记录来提供对象。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create!&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'John Doe'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;username: &lt;/span&gt;&lt;span class="s1"&gt;'johndoe'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;preferences: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;twitter: &lt;/span&gt;&lt;span class="s1"&gt;'johndoe'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;github: &lt;/span&gt;&lt;span class="s1"&gt;'johndoe'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;blog: &lt;/span&gt;&lt;span class="s1"&gt;'http://example.com'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;# Reload record from database to enforce serialization.&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reload&lt;/span&gt;

&lt;span class="c1"&gt;# Show preferences.&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;preferences&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; {"blog"=&amp;gt;"http://example.com", "github"=&amp;gt;"johndoe", "twitter"=&amp;gt;"johndoe"}&lt;/span&gt;

&lt;span class="c1"&gt;# Get blog.&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'blog'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; http://example.com&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到所有的键都是以&lt;code&gt;string&lt;/code&gt;形式返回。你也可以使用通用的序列化方式，你就可以通过符号来访问JSON对象。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;serialize&lt;/span&gt; &lt;span class="ss"&gt;:preferences&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;HashSerializer&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# app/serializers/hash_serializer.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HashSerializer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{}).&lt;/span&gt;&lt;span class="nf"&gt;with_indifferent_access&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另一个比较有意思的是ActiveRecord特性就是&lt;code&gt;store_accessor&lt;/code&gt;。如果你更改一些属性比较频繁，你可以创建&lt;code&gt;accessor&lt;/code&gt;，这样你可以赋值给属性来代替JSON传值。这也使得数据验证和创建表单更加简单。因此，如果我们创建一个表单来保存博客url、Github和Twitter账户，你可以像下面这样使用：&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;serialize&lt;/span&gt; &lt;span class="ss"&gt;:preferences&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;HashSerializer&lt;/span&gt;
  &lt;span class="n"&gt;store_accessor&lt;/span&gt; &lt;span class="ss"&gt;:preferences&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:blog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:github&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:twitter&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在你可以简单的赋值给这些属性了。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;blog: &lt;/span&gt;&lt;span class="s1"&gt;'http://example.org'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;github: &lt;/span&gt;&lt;span class="s1"&gt;'johndoe'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;preferences&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; {"blog"=&amp;gt;"http://example.org", "github"=&amp;gt;"johndoe"}&lt;/span&gt;

&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blog&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; http://example.org&lt;/span&gt;

&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:github&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; johndoe&lt;/span&gt;

&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'github'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; johndoe&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义了 store accessors 后，你可以像正常其他属性一样，定义数据验证和创建表单&lt;/p&gt;

&lt;h4 id="查询jsonb列"&gt;&lt;strong&gt;查询jsonb列&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;现在是时候使用一些查询操作。关于PostgreSQL的更多操作，请&lt;a href="http://www.postgresql.org/docs/9.4/static/functions-json.html"&gt;阅读完整的文档列表&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;同时，记得使用注释你执行的查询语句；这有助于你更好的去做索引优化。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;订阅新闻邮件的用户&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# preferences-&amp;gt;newsletter = true&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'preferences @&amp;gt; ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;newsletter: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;对Ruby感兴趣的用户&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# preferences-&amp;gt;interests = ['ruby', 'javascript', 'python']&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"preferences -&amp;gt; 'interests' ? :language"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;language: &lt;/span&gt;&lt;span class="s1"&gt;'ruby'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个查询不会用到列索引；如果你想查询数组，请确保你创建了表达式索引。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="no"&gt;CREATE&lt;/span&gt; &lt;span class="no"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;preferences_interests_on_users&lt;/span&gt; &lt;span class="no"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="no"&gt;USING&lt;/span&gt; &lt;span class="no"&gt;GIN&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'interests'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;设置了Twitter和Github账号的用户&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# preferences-&amp;gt;twitter AND preferences-&amp;gt;github&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'preferences ?&amp;amp; array[:keys]'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;keys: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'twitter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'github'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;设置Twitter或Github账号的用户&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# preferences-&amp;gt;twitter OR preferences-&amp;gt;github&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'preferences ?| array[:keys]'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;keys: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'twitter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'github'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;住在洛杉矶/加利福尼亚的用户&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# preferences-&amp;gt;state = 'SP' AND preferences-&amp;gt;city = 'São Paulo'&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'preferences @&amp;gt; ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;city: &lt;/span&gt;&lt;span class="s1"&gt;'San Francisco'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;state: &lt;/span&gt;&lt;span class="s1"&gt;'CA'&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="关于hstore"&gt;&lt;strong&gt;关于hstore&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;hstore&lt;/code&gt;列不允许嵌套的结构，它将所有的值以字符串形式存储，所以必须要在数据库层或者应用程序层将数据强制转化为字符串类型。而在&lt;code&gt;json/jsonb&lt;/code&gt;类型的列上不会遇到这个问题，数值类型(integers/float)，布尔类型，数组，字符串和空类型都可以接受，甚至你想的任何方式的数据嵌套。&lt;/p&gt;

&lt;p&gt;因此推荐你尽早放弃&lt;code&gt;hstore&lt;/code&gt;而去使用&lt;code&gt;jsonb&lt;/code&gt;，但要记住的是你必须使用PostgreSQL 9.4以上版本才行。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nandovieira.com/using-postgresql-and-hstore-with-rails"&gt;我以前写的hstore&lt;/a&gt;，想知道更多相关的内容就点击查看。&lt;/p&gt;

&lt;h4 id="总结"&gt;总结&lt;/h4&gt;

&lt;p&gt;PostgreSQL是一个非常强大的数据库，幸运的是ActiveRecord能跟上PostgreSQL的更新，为jsonb和hstore特性引入了内置支持。&lt;/p&gt;

&lt;p&gt;而像表达式索引这样的支持也在不断的改善。将ActiveRecord的序列化改为SQL没什么大不了的，但却使的索引变得更加简单。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# This doesn't exist, but it would be nice to have it!&lt;/span&gt;
&lt;span class="n"&gt;add_index&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"(settings-&amp;gt;&amp;gt;'github')"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;raw: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在每一个新版本中，使用Rails和PostgreSQL都比过去更加容易，变得更加出色。因此，尝试使用最新的Rails版本，付出总是会很快得到回报的。&lt;/p&gt;
</content>
  </entry>
</feed>
